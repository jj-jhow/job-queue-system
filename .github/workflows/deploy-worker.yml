# .github/workflows/deploy-worker.yml (Conceptual)
name: Deploy Worker to Azure VM

on:
  push:
    branches:
      - main # Trigger on direct push to main
    paths: # Optional: Only trigger if worker-service code changes
      - 'apps/backend/worker-service/**'
  pull_request:
    types: [closed] # Trigger when a PR is closed
    branches:
      - main # Only when the PR's target (base) branch is main
    paths: # Optional: Only trigger if worker-service code changes within the PR
      - 'apps/backend/worker-service/**'

jobs:
  build-and-deploy:
    # This condition ensures the job runs for direct pushes to main
    # OR when a PR to main is merged.
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    runs-on: self-hosted # Changed from ubuntu-latest
    # Define environment for this job if you are using Environment Secrets/Variables
    environment: development 
    env:
      VM_HOST: ${{ vars.AZURE_VM_IP }} # GitHub Secret
      VM_USER: ${{ vars.AZURE_VM_USER }} # GitHub Secret
      # Define paths on the VM
      REMOTE_APP_PATH: /home/${{ vars.AZURE_VM_USER }}/worker-service
      # Define path to worker service within the checkout
      WORKER_SERVICE_PATH: ./apps/backend/worker-service # Adjust if your repo structure is different
      # Accessing GitHub Variables (set at Repository or Environment level)
      JOB_QUEUE_NAME_VAR: ${{ vars.JOB_QUEUE_NAME }}
      REDIS_PORT_VAR: ${{ vars.REDIS_PORT }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x' # Match your application's Node.js version
        cache: 'npm'
        cache-dependency-path: ${{ env.WORKER_SERVICE_PATH }}/package-lock.json

    - name: Install dependencies
      run: npm install
      working-directory: ${{ env.WORKER_SERVICE_PATH }}

    - name: Build application
      run: npm run build
      working-directory: ${{ env.WORKER_SERVICE_PATH }}

    # Optional: Add a testing step here
    # - name: Run tests
    #   run: npm test
    #   working-directory: ${{ env.WORKER_SERVICE_PATH }}

    - name: Setup SSH agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }} # Ensure this is a secret

    - name: Copy application files to VM using scp
      shell: powershell
      run: |
        $sshKeyFileName = "id_rsa_temp_deploy_$(Get-Random)"
        $sshKeyPath = Join-Path $env:RUNNER_TEMP $sshKeyFileName
        
        # Write the key to a temporary file. -NoNewline is critical.
        Set-Content -Path $sshKeyPath -Value "${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}" -NoNewline # Ensure this is a secret
        
        # Set restrictive permissions for the key file on Windows
        # 1. Reset all permissions and remove inherited permissions
        icacls $sshKeyPath /reset
        icacls $sshKeyPath /inheritance:r 
        # 2. Grant the current user (runner user) Full Control using their SID.
        $currentUserSID = [System.Security.Principal.WindowsIdentity]::GetCurrent().User.Value
        icacls $sshKeyPath /grant "*$($currentUserSID):(F)"
        Write-Host "Set permissions for user SID: $($currentUserSID) on $sshKeyPath"

        Write-Host "Attempting to copy files using scp with key file: $sshKeyPath"
        
        # Use -i to specify the private key file. Added -v for verbose SSH output.
        scp -v -i "$sshKeyPath" -o StrictHostKeyChecking=no -o UserKnownHostsFile=NUL -r `
          "${{ env.WORKER_SERVICE_PATH }}/dist" `
          "${{ env.WORKER_SERVICE_PATH }}/package.json" `
          "${{ env.WORKER_SERVICE_PATH }}/package-lock.json" `
          "${{ env.VM_USER }}@${{ env.VM_HOST }}:${{ env.REMOTE_APP_PATH }}/"
        
        $scpExitCode = $LASTEXITCODE
        Write-Host "SCP command finished with exit code: $scpExitCode"
        
        # Remove the temporary key file immediately after use
        Remove-Item -Path $sshKeyPath -Force -ErrorAction SilentlyContinue
        
        if ($scpExitCode -ne 0) {
          Write-Error "SCP command failed with exit code $scpExitCode."
          exit $scpExitCode # This ensures the GitHub Actions step fails
        }
        echo "Files copied successfully."

    - name: Deploy application on VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.VM_HOST }}
        username: ${{ env.VM_USER }}
        key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }} # Ensure this is a secret
        port: 22 # Default SSH port
        script: |
          # Commands to be executed on the VM
          echo "Navigating to app directory..."
          cd ${{ env.REMOTE_APP_PATH }}

          # Files (dist, package.json, package-lock.json) are now copied by the previous scp step

          echo "Installing production dependencies..."
          # Create/overwrite .env file on the VM using secrets and variables
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" > .env
          echo "REDIS_PORT=${{ env.REDIS_PORT_VAR }}" >> .env # Using variable accessed via env context
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PRIMARY_KEY }}" >> .env # Using updated secret name
          echo "JOB_QUEUE_NAME=${{ env.JOB_QUEUE_NAME_VAR }}" >> .env # Using variable accessed via env context
          echo "NODE_ENV=production" >> .env

          npm install --omit=dev # Install only production dependencies based on new package.json

          echo "Restarting application with PM2..."
          # Attempt to restart, if it fails (e.g., not running), then start it.
          pm2 restart worker-app-01 || pm2 start dist/index.js --name worker-app-01

          echo "Deployment complete!"